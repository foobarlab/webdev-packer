#!/bin/bash
# custom minica script for root ca signed certs
# example run: `GOPATH=$HOME/go PATH=$PATH:$HOME/go/bin ./create_cert.sh www.test`
# see: https://github.com/jsha/minica

# try to set GOPATH globally in /etc/profile.d/go.sh if not existant
if [ ! -f /etc/profile.d/go.sh ]; then
cat <<'DATA' | sudo tee -a /etc/profile.d/go.sh
# we want our go apps to be in /opt/go and globally available
export GOPATH=/opt/go
export PATH=$PATH:/opt/go/bin
DATA
fi

. /etc/profile

if [ $# -ne 1 ]; then
    echo "No or too many arguments supplied. Please give a comma-separated list of domain names for which a certificate should be created."
    exit 1
fi

DATE=`date +%Y-%m-%d\ %H:%M:%S`
echo "---- $DATE ---- CREATE CERTIFICATE FOR $1 ----"

# check if certificate already exists
CERTDIR=`echo $1 | sed -re "s/(.?),(.*)/\1/"`
if [ -d $CERTDIR ]; then
    echo "There is already a certificate dir: $CERTDIR"
    if [[ -f $CERTDIR/cert.pem && -f $CERTDIR/key.pem ]]; then
        echo "Certificates 'cert.pem' and 'key.pem' found."
        echo "Delete this dir to create a new certificate and run this script again."
        exit 0
    else
        echo "No certificates found ... Proceeding ..."
    fi
fi

command -v minica >/dev/null 2>&1 || {
    
    echo "Required command 'minica' does not exist. Will try to install ...";
    
    command -v go >/dev/null 2>&1 || {
        echo "Seems like you have no 'go' command. Please install Golang first and run this script again. See: https://golang.org/";
        exit 1;
    }
    
    # check actual go version
    version=$(go version)
    regex="(go[0-9]?.[0-9]?.[0-9]?)"
    if [[ $version =~ $regex ]]; then 
        parsed_version=`echo $version | sed -re 's/(.*)go([0-9]?.[0-9]*.[0-9]*)(.*)/\2/'`
        major=`echo $parsed_version | cut -d. -f1`
        minor=`echo $parsed_version | cut -d. -f2`
        revision=`echo $parsed_version | cut -d. -f3`
        echo "Found installed Golang version: $major.$minor.$revision"

        # abort if golang seems too old
        if [ $major -lt 1 ]; then
            echo "Seems like you have an outdated Golang version installed. Please upgrade Golang and run this script again."
            exit 1
        fi

        # try to install minica
        if [ $minor -lt 11 ]; then
            # (<1.11)
            echo "You are using an older version of Golang. Proceeding anyway ...";
            if [[ ! -v GOPATH ]]; then
                echo "GOPATH is not set. Please configure first and run this script again."
                exit 1
            elif [[ -z "$GOPATH" ]]; then
                echo "GOPATH is set to the empty string. Please configure first and run this script again."
                exit 1
            else
                go get github.com/jsha/minica
                . /etc/profile
                command -v minica >/dev/null 2>&1 || { echo "'minica' was installed but could not be found in your PATH. Please ensure the bin dir of GOPATH is in your PATH. Aborting."; exit 1; }
            fi
        else
            # (>=1.11)
            echo "Congratulations, you have a recent Golang installation ..."
            if [[ ! -v GOPATH || -z "$GOPATH" ]]; then
                echo "GOPATH is not set or contains an empty string. Proceeding anyway."
                command -v git >/dev/null 2>&1 || { echo "Required command 'git' not installed. Aborting."; exit 1; }
                rm -rf ./go/
                mkdir -p go
                cd go
                git clone https://github.com/jsha/minica
                cd minica
                go build
                mv minica ../../
                cd ../../
                rm -rf ./go/
                export PATH=$PATH:.
            else
                go get github.com/jsha/minica
                . /etc/profile
                command -v minica >/dev/null 2>&1 || { echo "'minica' was installed but could not be found in your PATH. Please ensure the bin dir of GOPATH is in your PATH. Aborting."; exit 1; }
            fi
        fi

    else
        echo "An unexpected error occured. Please check your Golang installation."
        exit 1
    fi  
}

# download minica key and cert from server if it exists
for FILE in minica.pem minica-key.pem;
do
    if [ ! -f $FILE ]; then
        command -v wget >/dev/null 2>&1 || { echo "Required command 'wget' not installed. Aborting."; exit 1; }
        wget --no-check-certificate https://www.local/certs/$FILE
    fi
done

# create our cert
minica --domains $1
