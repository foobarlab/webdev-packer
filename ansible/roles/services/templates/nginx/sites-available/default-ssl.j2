# nginx ssl/http2 with apache/varnish as reverse proxy

server {

    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name _;  # catch all, see: https://nginx.org/en/docs/http/server_names.html

    ssl_certificate /etc/ssl/minica/cert.pem;
    ssl_certificate_key /etc/ssl/minica/key.pem;

    ssl_protocols TLSv1.3;

    root {{ htdocs_path }};    # is this needed?
    index index.php index.html index.htm;

    access_log /var/log/nginx/default.access_log main;
    error_log /var/log/nginx/default.error_log info;

    # error pages
    error_page 401 /401.html;
    error_page 404 /404.html;
    error_page 402 403 405 406 407 408 409 410 411 412 413 414 415 416 417 /unspecified.html;
    error_page 500 501 502 504 505 506 /50x.html;
    location = /401.html {
        root {{ errordocs_path }};
    }
    location = /404.html {
    	root {{ errordocs_path }};
    }
    location = /50x.html {
        root {{ errordocs_path }};
    }
    location = /unspecified.html {
        root {{ errordocs_path }};
    }

	# include php manual - DISABLE FOR PRODUCTION!
    location /manual {
		# note this is a special path pointing to localhost not vhosts!
    	alias /var/www/localhost/htdocs/manual/php-chunked-xhtml;
	}

    # System Maintenance (Service Unavailable)
    error_page 503 @503;
    location @503 {
		root {{ errordocs_path }};
		rewrite  ^(.*)$  /maintenance.html break;
    }
    # rewrite all the requests to the maintenance.html page if it exists.
    if (-f $document_root/.maintenance) {
    	return 503;
    }

    # deny access to ".ht*" files (.htpasswd, .htaccess, ...)
    location ~ /\.ht {
		deny all;
	}

	# Serve an empty 1x1 gif
    location = /images/empty.gif {
    	empty_gif;
	}

	# silent drop missing favicon requests
	location = /favicon.ico {
		access_log off;
		log_not_found off;
	}

    # serve static content directly
    location ~* ^.+\.(ico|jpe?g|gif|png|mp3|ogg|midi|wav|mpe?g|avi|tar|7z|zip|gz|bz2?|rar|svg|js|css|woff|woff2)$ {
		root {{ htdocs_path }};
        expires		max;
        add_header	Cache-Control public;
	}

    # we want everything being processed by reverse-proxy (Apache or Varnish)
	# TODO add browser-sync?
    location / {
        try_files $uri $uri/ /index.php;
    }
    location ~ \.php$ {
        proxy_set_header X-Real-IP  $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header Host $host;
        proxy_pass http://127.0.0.1:8080;   # forward to apache
        #proxy_pass http://127.0.0.1:6080;  # forward to varnish
    }

}
